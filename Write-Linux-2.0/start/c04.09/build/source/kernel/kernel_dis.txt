
E:/JHY/Write-Linux-lishutong/Write-Linux-2.0/start/c04.09/build/source/kernel/kernel.elf:     file format elf32-i386
E:/JHY/Write-Linux-lishutong/Write-Linux-2.0/start/c04.09/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000002c memsz 0x00000038 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000000c  00010010  00010010  00001010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  0001001c  0001001c  0000101c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  0001002c  0001002c  0000102c  2**2
                  ALLOC
  4 .debug_line   0000016e  00000000  00000000  0000102c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000024d  00000000  00000000  0000119a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000010e  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000040  00000000  00000000  000014f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000217  00000000  00000000  00001538  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000174f  2**0
                  CONTENTS, READONLY
 10 .debug_frame  0000002c  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00010010 l    d  .rodata	00000000 .rodata
0001001c l    d  .data	00000000 .data
0001002c l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 init.c
00010020 l     O .data	00000004 static_global_var
0001002c l     O .bss	00000004 static_global_var_zero
00010030 l     O .bss	00000004 static_local_var_zero.1749
00010028 l     O .data	00000004 static_local_var.1748
0001001c g     O .data	00000004 global_var
00010034 g     O .bss	00000004 globa_var_zero
00010010 g     O .rodata	00000004 const_int
0001000b g     F .text	00000005 kernel_init
00010000 g       .text	00000000 _start
00010024 g     O .data	00000004 str



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 02 00 00 00       	call   1000b <kernel_init>

	jmp .
   10009:	eb fe                	jmp    10009 <_start+0x9>

0001000b <kernel_init>:
const char * str = "abcdefg";

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   1000b:	55                   	push   %ebp
   1000c:	89 e5                	mov    %esp,%ebp
    int locar_var;
    static int static_local_var = 0x33;
    static int static_local_var_zero;

    for (;;) {}
   1000e:	eb fe                	jmp    1000e <kernel_init+0x3>
