
E:/JHY/Write-Linux-lishutong/Write-Linux-2.0/start/start/build/source/loader/loader.elf:     file format elf32-i386
E:/JHY/Write-Linux-lishutong/Write-Linux-2.0/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000656 memsz 0x00000656 flags r-x
    LOAD off    0x00001658 vaddr 0x00009658 paddr 0x00009658 align 2**12
         filesz 0x00000018 memsz 0x0000007c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000626  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000030  00008626  00008626  00001626  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  00009658  00009658  00001658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  00009680  00009680  00001670  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00001688  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f4  00000000  00000000  000016e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000030c  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a6  00000000  00000000  000022e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045b  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
00008626 l    d  .rodata	00000000 .rodata
00009658 l    d  .data	00000000 .data
00009680 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000000b cli
00008023 l     F .text	0000002a inb
0000804d l     F .text	0000002d outb
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003b show_msg
00008142 l     F .text	00000139 detect_memory
0000827b l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008334 l     F .text	0000001d inb
00008351 l     F .text	0000001f inw
00008370 l     F .text	0000001f outb
0000838f l     F .text	0000012c read_disk
000084bb l     F .text	0000011a reload_elf_file
000085d5 l     F .text	00000005 die
00008311 g     F .text	00000023 loader_entry
00009658 g     O .data	00000018 gdt_table
000085da g     F .text	0000004c load_kernel
00009680 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
00009670 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
00009670 g       .data	00000000 _edata
000096d4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 0e 03             	jmp    8311 <loader_entry>

00008003 <protect_mode_entry>:
	.global protect_mode_entry
	.extern load_kernel

protect_mode_entry:
	// 重新加载所有的数据段描述符
	mov $16, %ax		// 16为数据段选择子
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
    mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
    mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
    mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
    mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs

    8011:	ea da 85 00 00       	ljmp   $0x0,$0x85da
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <cli>:
#define CPU_INSTR_H

#include "types.h"

//关中断
static inline void cli (void){
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    801d:	fa                   	cli    
}
    801e:	90                   	nop
    801f:	66 5d                	pop    %ebp
    8021:	66 c3                	retl   

00008023 <inb>:
//CPU休眠
static inline void hlt (void){
    __asm__ __volatile__("hlt");
}
//从外设读取
static inline uint8_t inb (uint16_t port){
    8023:	66 55                	push   %ebp
    8025:	66 89 e5             	mov    %esp,%ebp
    8028:	66 83 ec 14          	sub    $0x14,%esp
    802c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8031:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;
    //inb al, dx
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv) : [p]"d"(port));
    8035:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    803b:	66 89 c2             	mov    %eax,%edx
    803e:	ec                   	in     (%dx),%al
    803f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8043:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8049:	66 c9                	leavel 
    804b:	66 c3                	retl   

0000804d <outb>:
    //in ax, dx
    __asm__ __volatile__("in %[p],%[v]":[v]"=a"(rv) : [p]"d"(port));
    return rv;
}
//向外设写入
static inline void outb (uint16_t port, uint8_t data){
    804d:	66 55                	push   %ebp
    804f:	66 89 e5             	mov    %esp,%ebp
    8052:	66 83 ec 08          	sub    $0x8,%esp
    8056:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    805b:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8060:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8064:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    //outb al, dx
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
    8068:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    806e:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8074:	ee                   	out    %al,(%dx)
}
    8075:	90                   	nop
    8076:	66 c9                	leavel 
    8078:	66 c3                	retl   

0000807a <lgdt>:
//设置gdt表
static inline void lgdt (uint32_t start , uint32_t size){
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
    struct{
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start32_16;
    }gdt;
    gdt.start15_0 = start & 0xffff;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.start32_16 = start >> 16;
    808c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8091:	66 c1 e8 10          	shr    $0x10,%eax
    8095:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.limit = size -1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:
	idt.limit = size - 1;

	__asm__ __volatile__("lidt %0"::"m"(idt));
}
//读取CR0
static inline uint8_t read_cr0 (void){
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0, %[v]": [v]"=r"(cr0));
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:
//写入
static inline void write_cr0 (uint32_t v){
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    //inb al, dx
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
    //return cr0;
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:

//远跳转
static inline void far_jump(uint32_t selector, uint32_t offset) {
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:
void protect_mode_entry (void);

boot_info_t boot_info;			// 启动参数信息
//用于打印一个信息
static void show_msg(const char * msg)
{
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while((c = *msg++) != '\0')
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
    {
        __asm__ __volatile__(
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while((c = *msg++) != '\0')
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
    	    "int $0x10"::[ch]"r"(c)
        );
	    

    }
}
    813d:	90                   	nop
    813e:	66 c9                	leavel 
    8140:	66 c3                	retl   

00008142 <detect_memory>:

//用于获取可以使用的内存信息, 保存在结构体里面
static void detect_memory (void)
{
    8142:	66 55                	push   %ebp
    8144:	66 89 e5             	mov    %esp,%ebp
    8147:	66 57                	push   %edi
    8149:	66 56                	push   %esi
    814b:	66 53                	push   %ebx
    814d:	66 83 ec 30          	sub    $0x30,%esp
    //获取的信息存储的地址
    SMAP_entry_t smap_entry;
    SMAP_entry_t * entry = &smap_entry;
    8151:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8156:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
    uint32_t contID=0;
    815b:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8162:	00 00 
    uint32_t signature, bytes; 
    show_msg("try to detect memory");
    8164:	66 68 26 86 00 00    	pushl  $0x8626
    816a:	66 e8 97 ff ff ff    	calll  8107 <show_msg>
    8170:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count = 0;
    8174:	66 c7 06 d0 96 00 00 	movl   $0x0,-0x6930
    817b:	00 00 
    for(int i = 0 ; i<BOOT_RAM_REGION_MAX;i++)
    817d:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8184:	00 00 
    8186:	e9 c6 00             	jmp    824f <detect_memory+0x10d>
    {
        __asm__ __volatile__(
    8189:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    818f:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8194:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819a:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a0:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a5:	66 89 f7             	mov    %esi,%edi
    81a8:	cd 15                	int    $0x15
    81aa:	66 89 da             	mov    %ebx,%edx
    81ad:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b2:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b7:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
            "int $0x15"
            : "=a"(signature),"=c"(bytes),"=b"(contID)
            :"a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)
        );
        if(signature != 0x534D4150)
    81bc:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c3:	4d 53 
    81c5:	74 13                	je     81da <detect_memory+0x98>
        {
            show_msg("Failed \r\n");
    81c7:	66 68 3b 86 00 00    	pushl  $0x863b
    81cd:	66 e8 34 ff ff ff    	calll  8107 <show_msg>
    81d3:	66 83 c4 04          	add    $0x4,%esp
            return ;            
    81d7:	e9 92 00             	jmp    826c <detect_memory+0x12a>
        }
        if(bytes>20 && (entry->ACPI &0x0001)==0)
    81da:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e0:	76 13                	jbe    81f5 <detect_memory+0xb3>
    81e2:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e7:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ec:	66 83 e0 01          	and    $0x1,%eax
    81f0:	66 85 c0             	test   %eax,%eax
    81f3:	74 53                	je     8248 <detect_memory+0x106>
        {
            //这一个数值被忽略
            continue;
        }
        if(entry->Type == 1)
    81f5:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fa:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    81ff:	66 83 f8 01          	cmp    $0x1,%eax
    8203:	75 39                	jne    823e <detect_memory+0xfc>
        {
            //这个时候这一个内存可以被使用
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8205:	66 a1 d0 96          	mov    0x96d0,%eax
    8209:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820e:	67 66 8b 12          	mov    (%edx),%edx
    8212:	67 66 89 14 c5 80 96 	mov    %edx,0x9680(,%eax,8)
    8219:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size  = entry->LengthL;
    821b:	66 a1 d0 96          	mov    0x96d0,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8229:	67 66 89 14 c5 84 96 	mov    %edx,0x9684(,%eax,8)
    8230:	00 00 
            boot_info.ram_region_count++;
    8232:	66 a1 d0 96          	mov    0x96d0,%eax
    8236:	66 83 c0 01          	add    $0x1,%eax
    823a:	66 a3 d0 96          	mov    %eax,0x96d0
        }


        if(contID == 0)
    823e:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8244:	74 15                	je     825b <detect_memory+0x119>
    8246:	eb 01                	jmp    8249 <detect_memory+0x107>
            continue;
    8248:	90                   	nop
    for(int i = 0 ; i<BOOT_RAM_REGION_MAX;i++)
    8249:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    824f:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8255:	0f 8e 30 ff          	jle    8189 <detect_memory+0x47>
    8259:	eb 01                	jmp    825c <detect_memory+0x11a>
        {
            //没有可以使用的值
            break;
    825b:	90                   	nop
        }
    }
    show_msg("OK");
    825c:	66 68 45 86 00 00    	pushl  $0x8645
    8262:	66 e8 9f fe ff ff    	calll  8107 <show_msg>
    8268:	66 83 c4 04          	add    $0x4,%esp

} 
    826c:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8271:	66 5b                	pop    %ebx
    8273:	66 5e                	pop    %esi
    8275:	66 5f                	pop    %edi
    8277:	66 5d                	pop    %ebp
    8279:	66 c3                	retl   

0000827b <enter_protect_mode>:
    {0xffff, 0x0000, 0x9200, 0x00cf},
};


//进入保护模式
static void enter_protect_mode(void){
    827b:	66 55                	push   %ebp
    827d:	66 89 e5             	mov    %esp,%ebp
    8280:	66 83 ec 10          	sub    $0x10,%esp
    //关中断
    cli();
    8284:	66 e8 8e fd ff ff    	calll  8018 <cli>
    uint8_t v = inb(0x92);
    828a:	66 68 92 00 00 00    	pushl  $0x92
    8290:	66 e8 8d fd ff ff    	calll  8023 <inb>
    8296:	66 83 c4 04          	add    $0x4,%esp
    829a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    829e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a4:	66 83 c8 02          	or     $0x2,%eax
    82a8:	66 0f b6 c0          	movzbl %al,%eax
    82ac:	66 50                	push   %eax
    82ae:	66 68 92 00 00 00    	pushl  $0x92
    82b4:	66 e8 93 fd ff ff    	calll  804d <outb>
    82ba:	66 83 c4 08          	add    $0x8,%esp
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82be:	66 b8 58 96 00 00    	mov    $0x9658,%eax
    82c4:	66 6a 18             	pushl  $0x18
    82c7:	66 50                	push   %eax
    82c9:	66 e8 ab fd ff ff    	calll  807a <lgdt>
    82cf:	66 83 c4 08          	add    $0x8,%esp
    //修改控制寄存器
    uint32_t cr0 = read_cr0();
    82d3:	66 e8 d7 fd ff ff    	calll  80b0 <read_cr0>
    82d9:	66 0f b6 c0          	movzbl %al,%eax
    82dd:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1<<0));
    82e2:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e7:	66 83 c8 01          	or     $0x1,%eax
    82eb:	66 50                	push   %eax
    82ed:	66 e8 d7 fd ff ff    	calll  80ca <write_cr0>
    82f3:	66 83 c4 04          	add    $0x4,%esp

    far_jump(8, (uint32_t) protect_mode_entry);
    82f7:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 6a 08             	pushl  $0x8
    8302:	66 e8 d4 fd ff ff    	calll  80dc <far_jump>
    8308:	66 83 c4 08          	add    $0x8,%esp
    //sti();

}
    830c:	90                   	nop
    830d:	66 c9                	leavel 
    830f:	66 c3                	retl   

00008311 <loader_entry>:

void loader_entry(void){
    8311:	66 55                	push   %ebp
    8313:	66 89 e5             	mov    %esp,%ebp
    show_msg("Hello world\r\n");
    8316:	66 68 48 86 00 00    	pushl  $0x8648
    831c:	66 e8 e5 fd ff ff    	calll  8107 <show_msg>
    8322:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8326:	66 e8 16 fe ff ff    	calll  8142 <detect_memory>
    enter_protect_mode();
    832c:	66 e8 49 ff ff ff    	calll  827b <enter_protect_mode>
    for(;;){
    8332:	eb fe                	jmp    8332 <loader_entry+0x21>

00008334 <inb>:
static inline uint8_t inb (uint16_t port){
    8334:	55                   	push   %bp
    8335:	89 e5                	mov    %sp,%bp
    8337:	83 ec 14             	sub    $0x14,%sp
    833a:	8b 45 08             	mov    0x8(%di),%ax
    833d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p],%[v]":[v]"=a"(rv) : [p]"d"(port));
    8341:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8345:	89 c2                	mov    %ax,%dx
    8347:	ec                   	in     (%dx),%al
    8348:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    834b:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    834f:	c9                   	leave  
    8350:	c3                   	ret    

00008351 <inw>:
static inline uint16_t inw (uint16_t port){
    8351:	55                   	push   %bp
    8352:	89 e5                	mov    %sp,%bp
    8354:	83 ec 14             	sub    $0x14,%sp
    8357:	8b 45 08             	mov    0x8(%di),%ax
    835a:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("in %[p],%[v]":[v]"=a"(rv) : [p]"d"(port));
    835e:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8362:	89 c2                	mov    %ax,%dx
    8364:	66 ed                	in     (%dx),%eax
    8366:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    836a:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    836e:	c9                   	leave  
    836f:	c3                   	ret    

00008370 <outb>:
static inline void outb (uint16_t port, uint8_t data){
    8370:	55                   	push   %bp
    8371:	89 e5                	mov    %sp,%bp
    8373:	83 ec 08             	sub    $0x8,%sp
    8376:	8b 55 08             	mov    0x8(%di),%dx
    8379:	8b 45 0c             	mov    0xc(%di),%ax
    837c:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8380:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v],%[p]"::[p]"d"(port),[v]"a"(data));
    8383:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8387:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838b:	ee                   	out    %al,(%dx)
}
    838c:	90                   	nop
    838d:	c9                   	leave  
    838e:	c3                   	ret    

0000838f <read_disk>:

extern boot_info_t boot_info;			// 启动参数信息

//进行磁盘的读取
static void read_disk(int sector, int sector_count, uint8_t *buf)
{
    838f:	55                   	push   %bp
    8390:	89 e5                	mov    %sp,%bp
    8392:	53                   	push   %bx
    8393:	83 ec 10             	sub    $0x10,%sp
    //设置为主驱动器, 同时使用LBA模式进行读取
    outb(0x1f6, (uint8_t)0xe0);
    8396:	68 e0 00             	push   $0xe0
    8399:	00 00                	add    %al,(%bx,%si)
    839b:	68 f6 01             	push   $0x1f6
    839e:	00 00                	add    %al,(%bx,%si)
    83a0:	e8 cb ff             	call   836e <inw+0x1d>
    83a3:	ff                   	(bad)  
    83a4:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    //读取的字节数高字节
    outb(0x1f2, (uint8_t)(sector_count >> 8));
    83a8:	8b 45 0c             	mov    0xc(%di),%ax
    83ab:	c1 f8 08             	sar    $0x8,%ax
    83ae:	0f b6 c0             	movzbw %al,%ax
    83b1:	50                   	push   %ax
    83b2:	68 f2 01             	push   $0x1f2
    83b5:	00 00                	add    %al,(%bx,%si)
    83b7:	e8 b4 ff             	call   836e <inw+0x1d>
    83ba:	ff                   	(bad)  
    83bb:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    //读取的扇区的地址4, 5, 6字节, 这里只使用32位的扇区地址
    outb(0x1f3, (uint8_t)(sector >> 24));
    83bf:	8b 45 08             	mov    0x8(%di),%ax
    83c2:	c1 f8 18             	sar    $0x18,%ax
    83c5:	0f b6 c0             	movzbw %al,%ax
    83c8:	50                   	push   %ax
    83c9:	68 f3 01             	push   $0x1f3
    83cc:	00 00                	add    %al,(%bx,%si)
    83ce:	e8 9d ff             	call   836e <inw+0x1d>
    83d1:	ff                   	(bad)  
    83d2:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f4, (uint8_t)(0));
    83d6:	6a 00                	push   $0x0
    83d8:	68 f4 01             	push   $0x1f4
    83db:	00 00                	add    %al,(%bx,%si)
    83dd:	e8 8e ff             	call   836e <inw+0x1d>
    83e0:	ff                   	(bad)  
    83e1:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f5, (uint8_t)(0));
    83e5:	6a 00                	push   $0x0
    83e7:	68 f5 01             	push   $0x1f5
    83ea:	00 00                	add    %al,(%bx,%si)
    83ec:	e8 7f ff             	call   836e <inw+0x1d>
    83ef:	ff                   	(bad)  
    83f0:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    //读取的字节数低字节
    outb(0x1f2, (uint8_t)sector_count);
    83f4:	8b 45 0c             	mov    0xc(%di),%ax
    83f7:	0f b6 c0             	movzbw %al,%ax
    83fa:	50                   	push   %ax
    83fb:	68 f2 01             	push   $0x1f2
    83fe:	00 00                	add    %al,(%bx,%si)
    8400:	e8 6b ff             	call   836e <inw+0x1d>
    8403:	ff                   	(bad)  
    8404:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    //读取的扇区的地址1, 2, 3字节
    outb(0x1f3, (uint8_t)(sector));
    8408:	8b 45 08             	mov    0x8(%di),%ax
    840b:	0f b6 c0             	movzbw %al,%ax
    840e:	50                   	push   %ax
    840f:	68 f3 01             	push   $0x1f3
    8412:	00 00                	add    %al,(%bx,%si)
    8414:	e8 57 ff             	call   836e <inw+0x1d>
    8417:	ff                   	(bad)  
    8418:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f4, (uint8_t)(sector >> 8));
    841c:	8b 45 08             	mov    0x8(%di),%ax
    841f:	c1 f8 08             	sar    $0x8,%ax
    8422:	0f b6 c0             	movzbw %al,%ax
    8425:	50                   	push   %ax
    8426:	68 f4 01             	push   $0x1f4
    8429:	00 00                	add    %al,(%bx,%si)
    842b:	e8 40 ff             	call   836e <inw+0x1d>
    842e:	ff                   	(bad)  
    842f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1f5, (uint8_t)(sector >> 16));
    8433:	8b 45 08             	mov    0x8(%di),%ax
    8436:	c1 f8 10             	sar    $0x10,%ax
    8439:	0f b6 c0             	movzbw %al,%ax
    843c:	50                   	push   %ax
    843d:	68 f5 01             	push   $0x1f5
    8440:	00 00                	add    %al,(%bx,%si)
    8442:	e8 29 ff             	call   836e <inw+0x1d>
    8445:	ff                   	(bad)  
    8446:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    //读取
    outb(0x1f7, (uint8_t)0x24);
    844a:	6a 24                	push   $0x24
    844c:	68 f7 01             	push   $0x1f7
    844f:	00 00                	add    %al,(%bx,%si)
    8451:	e8 1a ff             	call   836e <inw+0x1d>
    8454:	ff                   	(bad)  
    8455:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    //检查状态寄存器
    uint16_t * data_buf = (uint16_t *)buf;
    8459:	8b 45 10             	mov    0x10(%di),%ax
    845c:	89 45 f8             	mov    %ax,-0x8(%di)
    while(sector_count -- > 0)
    845f:	eb 47                	jmp    84a8 <read_disk+0x119>
    {
        //等待忙标志位结束
        while ((inb(0x1f7) & 0x88) != 0x8){}
    8461:	90                   	nop
    8462:	68 f7 01             	push   $0x1f7
    8465:	00 00                	add    %al,(%bx,%si)
    8467:	e8 c8 fe             	call   8332 <loader_entry+0x21>
    846a:	ff                   	(bad)  
    846b:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    846f:	0f b6 c0             	movzbw %al,%ax
    8472:	25 88 00             	and    $0x88,%ax
    8475:	00 00                	add    %al,(%bx,%si)
    8477:	83 f8 08             	cmp    $0x8,%ax
    847a:	75 e6                	jne    8462 <read_disk+0xd3>
        for(int i=0;i<SECTOR_SIZE/2; i++)
    847c:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    8481:	00 00                	add    %al,(%bx,%si)
    8483:	eb 1d                	jmp    84a2 <read_disk+0x113>
        {
            *data_buf++ = inw(0x1f0);
    8485:	8b 5d f8             	mov    -0x8(%di),%bx
    8488:	8d 43 02             	lea    0x2(%bp,%di),%ax
    848b:	89 45 f8             	mov    %ax,-0x8(%di)
    848e:	68 f0 01             	push   $0x1f0
    8491:	00 00                	add    %al,(%bx,%si)
    8493:	e8 b9 fe             	call   834f <inb+0x1b>
    8496:	ff                   	(bad)  
    8497:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    849b:	66 89 03             	mov    %eax,(%bp,%di)
        for(int i=0;i<SECTOR_SIZE/2; i++)
    849e:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84a2:	83 7d f4 7f          	cmpw   $0x7f,-0xc(%di)
    84a6:	7e dd                	jle    8485 <read_disk+0xf6>
    while(sector_count -- > 0)
    84a8:	8b 45 0c             	mov    0xc(%di),%ax
    84ab:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84ae:	89 55 0c             	mov    %dx,0xc(%di)
    84b1:	85 c0                	test   %ax,%ax
    84b3:	7f ac                	jg     8461 <read_disk+0xd2>
        }
    }
}
    84b5:	90                   	nop
    84b6:	8b 5d fc             	mov    -0x4(%di),%bx
    84b9:	c9                   	leave  
    84ba:	c3                   	ret    

000084bb <reload_elf_file>:
//加载elf文件, 同时返回需要跳转的文件的地址
static uint32_t reload_elf_file(uint8_t * file_buffer){
    84bb:	55                   	push   %bp
    84bc:	89 e5                	mov    %sp,%bp
    84be:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr *elf_hdr = (Elf32_Ehdr *)file_buffer;
    84c1:	8b 45 08             	mov    0x8(%di),%ax
    84c4:	89 45 e8             	mov    %ax,-0x18(%di)
    if((elf_hdr->e_ident[0] != 0x7f) || (elf_hdr->e_ident[1] != 'E') ||
    84c7:	8b 45 e8             	mov    -0x18(%di),%ax
    84ca:	0f b6 00             	movzbw (%bx,%si),%ax
    84cd:	3c 7f                	cmp    $0x7f,%al
    84cf:	75 21                	jne    84f2 <reload_elf_file+0x37>
    84d1:	8b 45 e8             	mov    -0x18(%di),%ax
    84d4:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    84d8:	3c 45                	cmp    $0x45,%al
    84da:	75 16                	jne    84f2 <reload_elf_file+0x37>
         (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')){
    84dc:	8b 45 e8             	mov    -0x18(%di),%ax
    84df:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    if((elf_hdr->e_ident[0] != 0x7f) || (elf_hdr->e_ident[1] != 'E') ||
    84e3:	3c 4c                	cmp    $0x4c,%al
    84e5:	75 0b                	jne    84f2 <reload_elf_file+0x37>
         (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')){
    84e7:	8b 45 e8             	mov    -0x18(%di),%ax
    84ea:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    84ee:	3c 46                	cmp    $0x46,%al
    84f0:	74 0a                	je     84fc <reload_elf_file+0x41>
        return 0;
    84f2:	b8 00 00             	mov    $0x0,%ax
    84f5:	00 00                	add    %al,(%bx,%si)
    84f7:	e9 d7 00             	jmp    85d1 <reload_elf_file+0x116>
    84fa:	00 00                	add    %al,(%bx,%si)
    }
    for(int i=0;i<elf_hdr->e_phnum;i++)
    84fc:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8501:	00 00                	add    %al,(%bx,%si)
    8503:	e9 b2 00             	jmp    85b8 <reload_elf_file+0xfd>
    8506:	00 00                	add    %al,(%bx,%si)
    {
        Elf32_Phdr *phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    8508:	8b 45 e8             	mov    -0x18(%di),%ax
    850b:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    850e:	8b 45 08             	mov    0x8(%di),%ax
    8511:	01 c2                	add    %ax,%dx
    8513:	8b 45 fc             	mov    -0x4(%di),%ax
    8516:	c1 e0 05             	shl    $0x5,%ax
    8519:	01 d0                	add    %dx,%ax
    851b:	89 45 e4             	mov    %ax,-0x1c(%di)
        if(phdr->p_type != PT_LOAD){
    851e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8521:	8b 00                	mov    (%bx,%si),%ax
    8523:	83 f8 01             	cmp    $0x1,%ax
    8526:	0f 85 89 00          	jne    85b3 <reload_elf_file+0xf8>
    852a:	00 00                	add    %al,(%bx,%si)
            //内容不能加载
            continue;
        }
        //获取源文件地址以及需要加载的位置
        uint8_t *src = file_buffer + phdr->p_offset;
    852c:	8b 45 e4             	mov    -0x1c(%di),%ax
    852f:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8532:	8b 45 08             	mov    0x8(%di),%ax
    8535:	01 d0                	add    %dx,%ax
    8537:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t *dest = (uint8_t *)phdr->p_paddr;
    853a:	8b 45 e4             	mov    -0x1c(%di),%ax
    853d:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8540:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j=0; j < phdr->p_filesz;j++)
    8543:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    8548:	00 00                	add    %al,(%bx,%si)
    854a:	eb 1b                	jmp    8567 <reload_elf_file+0xac>
        //进行文件的复制
        {
            *dest++ = *src++; 
    854c:	8b 55 f8             	mov    -0x8(%di),%dx
    854f:	8d 42 01             	lea    0x1(%bp,%si),%ax
    8552:	89 45 f8             	mov    %ax,-0x8(%di)
    8555:	8b 45 f4             	mov    -0xc(%di),%ax
    8558:	8d 48 01             	lea    0x1(%bx,%si),%cx
    855b:	89 4d f4             	mov    %cx,-0xc(%di)
    855e:	0f b6 12             	movzbw (%bp,%si),%dx
    8561:	88 10                	mov    %dl,(%bx,%si)
        for(int j=0; j < phdr->p_filesz;j++)
    8563:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    8567:	8b 45 e4             	mov    -0x1c(%di),%ax
    856a:	8b 50 10             	mov    0x10(%bx,%si),%dx
    856d:	8b 45 f0             	mov    -0x10(%di),%ax
    8570:	39 c2                	cmp    %ax,%dx
    8572:	77 d8                	ja     854c <reload_elf_file+0x91>
        }
        //计算结束地址, 对bss区域进行清零
        dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    8574:	8b 45 e4             	mov    -0x1c(%di),%ax
    8577:	8b 50 10             	mov    0x10(%bx,%si),%dx
    857a:	8b 45 e4             	mov    -0x1c(%di),%ax
    857d:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8580:	01 d0                	add    %dx,%ax
    8582:	89 45 f4             	mov    %ax,-0xc(%di)
        for(int j=0;j<phdr->p_memsz - phdr->p_filesz;j++)
    8585:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    858a:	00 00                	add    %al,(%bx,%si)
    858c:	eb 10                	jmp    859e <reload_elf_file+0xe3>
        {
            *dest++ = 0;
    858e:	8b 45 f4             	mov    -0xc(%di),%ax
    8591:	8d 50 01             	lea    0x1(%bx,%si),%dx
    8594:	89 55 f4             	mov    %dx,-0xc(%di)
    8597:	c6 00 00             	movb   $0x0,(%bx,%si)
        for(int j=0;j<phdr->p_memsz - phdr->p_filesz;j++)
    859a:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    859e:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a1:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85a4:	8b 45 e4             	mov    -0x1c(%di),%ax
    85a7:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85aa:	29 c2                	sub    %ax,%dx
    85ac:	8b 45 ec             	mov    -0x14(%di),%ax
    85af:	39 c2                	cmp    %ax,%dx
    85b1:	77 db                	ja     858e <reload_elf_file+0xd3>
    85b3:	eb 01                	jmp    85b6 <reload_elf_file+0xfb>
            continue;
    85b5:	90                   	nop
    for(int i=0;i<elf_hdr->e_phnum;i++)
    85b6:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    85ba:	8b 45 e8             	mov    -0x18(%di),%ax
    85bd:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    85c1:	0f b7 c0             	movzww %ax,%ax
    85c4:	39 45 fc             	cmp    %ax,-0x4(%di)
    85c7:	0f 8c 3b ff          	jl     8506 <reload_elf_file+0x4b>
    85cb:	ff                   	(bad)  
    85cc:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }
    //返回进入的地址
    return elf_hdr->e_entry;
    85d0:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    85d3:	c9                   	leave  
    85d4:	c3                   	ret    

000085d5 <die>:
static void die(int code){
    85d5:	55                   	push   %bp
    85d6:	89 e5                	mov    %sp,%bp
    for(;;){};
    85d8:	eb fe                	jmp    85d8 <die+0x3>

000085da <load_kernel>:
}

void load_kernel(void)
{
    85da:	55                   	push   %bp
    85db:	89 e5                	mov    %sp,%bp
    85dd:	83 ec 18             	sub    $0x18,%sp
    //进行读取
    read_disk(100, 500, (uint8_t *)(SYS_KERNEL_LOAD_ADDR));
    85e0:	68 00 00             	push   $0x0
    85e3:	10 00                	adc    %al,(%bx,%si)
    85e5:	68 f4 01             	push   $0x1f4
    85e8:	00 00                	add    %al,(%bx,%si)
    85ea:	6a 64                	push   $0x64
    85ec:	e8 9e fd             	call   838d <outb+0x1d>
    85ef:	ff                   	(bad)  
    85f0:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    //解析elf文件
    uint32_t kernel_entey = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    85f4:	68 00 00             	push   $0x0
    85f7:	10 00                	adc    %al,(%bx,%si)
    85f9:	e8 bd fe             	call   84b9 <read_disk+0x12a>
    85fc:	ff                   	(bad)  
    85fd:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8601:	89 45 f4             	mov    %ax,-0xc(%di)
    if(kernel_entey == 0)
    8604:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    8608:	75 0a                	jne    8614 <load_kernel+0x3a>
    {
        //加载程序失败
        die(-1);
    860a:	6a ff                	push   $0xffff
    860c:	e8 c4 ff             	call   85d3 <reload_elf_file+0x118>
    860f:	ff                   	(bad)  
    8610:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    }
    //跳转到对应的位置
    ((void (*) (boot_info_t *))kernel_entey)(&boot_info);
    8614:	8b 45 f4             	mov    -0xc(%di),%ax
    8617:	83 ec 0c             	sub    $0xc,%sp
    861a:	68 80 96             	push   $0x9680
    861d:	00 00                	add    %al,(%bx,%si)
    861f:	ff d0                	call   *%ax
    8621:	83 c4 10             	add    $0x10,%sp
    for(;;)
    8624:	eb fe                	jmp    8624 <load_kernel+0x4a>
