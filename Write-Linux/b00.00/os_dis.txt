
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00001270 memsz 0x00001270 flags r-x
    LOAD off    0x00002000 vaddr 0x0000a000 paddr 0x0000a000 align 2**12
         filesz 0x000050f0 memsz 0x00009900 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000563  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000001a  00008163  00008163  00001163  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  00008180  00008180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         000050f0  0000a000  0000a000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00004800  0000f100  0000f100  000070f0  2**5
                  ALLOC
  5 .comment      00000011  00000000  00000000  000070f0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00007108  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000004d6  00000000  00000000  00007148  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000014f  00000000  00000000  0000761e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000153  00000000  00000000  0000776d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021c  00000000  00000000  000078c0  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00008163 l    d  .rodata	00000000 .rodata
00008180 l    d  .eh_frame	00000000 .eh_frame
0000a000 l    d  .data	00000000 .data
0000f100 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e9c l       .text	00000000 gdt_desc
00007ea2 l       .text	00000000 idt_desc
00007e58 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000f0e8 l     O .data	00000004 row.1736
0000d000 l     O .data	00001000 page_table
0000f0ec l     O .data	00000004 task_tss.1810
0000b000 g     O .data	00000800 gdt_table
0000f100 g     O .bss	00001000 task0_dpl3_stack
00010100 g     O .bss	00001000 task1_dpl3_stack
00007f3c g     F .text	0000002e sys_show
0000a800 g     O .data	00000800 task1_ldt_table
00007f6a g     F .text	0000002c task_0
0000f000 g     O .data	00000068 task0_tss
0000c000 g     O .data	00001000 map_phy_buffer
00007e68 g       .text	00000000 timer_int
00007fe1 g     F .text	0000014a os_init
00011100 g     O .bss	00001000 task1_dpl0_stack
0000f080 g     O .data	00000068 task1_tss
0000a000 g     O .data	00000800 task0_ldt_table
00007ea8 g     F .text	00000094 do_syscall
00007c00 g       .text	00000000 _start
00007fc2 g     F .text	0000001f outb
0000f0f0 g       .bss	00000000 __bss_start
0000e000 g     O .data	00001000 pg_dir
0000f0f0 g       .data	00000000 _edata
00013900 g       .bss	00000000 _end
00007e7c g       .text	00000000 syscall_handler
00007f96 g     F .text	0000002c task_1
00012100 g     O .bss	00000800 idt_table
00012900 g     O .bss	00001000 task0_dpl0_stack
0000812b g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start:
//设置段寄存器
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	//首先设置读取到的位置
	mov $_start_32, %bx
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	//在这里设置开始的扇区数
	mov $0x2, %cx
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	//在这里设置的是读取的数量,以及是使用的读取模式
	mov $0x240, %ax
	//在这里设置读取的是C盘
	mov $0x80, %dx
    7c1e:	00 cd                	add    %cl,%ch
	//调用中断
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	//读取失败再次读取
	jc read_self_all
	//进入保护模式
	//关中断
	cli
    7c23:	fa                   	cli    
	//加载新的GDT表
	lgdt gdt_desc
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	9c                   	pushf  
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	//加载中断向量表
	lidt idt_desc
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	a2 7e 66 b8 01       	mov    %al,0x1b8667e

	//设置CR0的0位, 操作的时候使用16位的操作寄存器
	mov $1, %eax
    7c31:	00 00                	add    %al,(%eax)
    7c33:	00 0f                	add    %cl,(%edi)
	lmsw %ax
    7c35:	01 f0                	add    %esi,%eax
	//跳转到内核代码段,进入32位模式,第一个参数是段的地址, 第二个数字是偏移量,也就是C语言程序被复制到的位置
	jmp $(KERNEL_CODE_SEG),$_start_32
    7c37:	ea 00 7e 08 00 eb fe 	ljmp   $0xfeeb,$0x87e00
	...
	jmp .
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	//标记下面是32位, 以及是代码段
	.code32
	.text
_start_32:
	//在这里设置段地址
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	//这时候进行初始化时钟, 打开时钟中断,同时设置中断的向量表
	call os_init
    7e13:	e8 c9 01 00 00       	call   7fe1 <os_init>
	//打开页表
	mov $pg_dir, %eax
    7e18:	b8 00 e0 00 00       	mov    $0xe000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3
	//CR4里面有一个位控制是否允许这一个模式 
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1<<4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4
	//还需要控制PR0最高位w为1
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1<<31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	//打开中断, 由于在进入任务的时候会设置IF位, 所以在这里的时候不再进行设置
	//sti
	
	//告诉CPU正在运行的任务
	mov $TASK0_TSS_SEG, %ax
    7e34:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax
    7e38:	0f 00 d8             	ltr    %ax

	//设置任务的LDT
	mov $TASK0_LDT_SEG, %ax
    7e3b:	66 b8 40 00          	mov    $0x40,%ax
	lldt %ax
    7e3f:	0f 00 d0             	lldt   %ax
	//设置进入低特权级时候的所需要的栈
	push $TASK_DATA_SEG
    7e42:	6a 0f                	push   $0xf
	//设置栈的指针
	push $task0_dpl3_stack + 1024*4
    7e44:	68 00 01 01 00       	push   $0x10100
	//设置EFLAGS, 主要是设置中断的状态
	push $0x202
    7e49:	68 02 02 00 00       	push   $0x202
	//这是代码段
	push $TASK_CODE_SEG
    7e4e:	6a 07                	push   $0x7
	push $task_0_entry
    7e50:	68 58 7e 00 00       	push   $0x7e58

	//在这里进入低特权级
	iret
    7e55:	cf                   	iret   
	jmp .
    7e56:	eb fe                	jmp    7e56 <_start_32+0x56>

00007e58 <task_0_entry>:

//进程0, 设置完栈以后会进入任务0里面
task_0_entry:
	//ss在出栈的时候已经设置了
	mov %ss, %ax
    7e58:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e5b:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e5d:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e5f:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e61:	8e e0                	mov    %eax,%fs
	jmp task_0
    7e63:	e9 02 01 00 00       	jmp    7f6a <task_0>

00007e68 <timer_int>:

//中断处理函数, 会在这里进行任务的切换
timer_int:

	//对寄存器进行保护
	push %ds
    7e68:	1e                   	push   %ds
	pusha
    7e69:	60                   	pusha  

	//清除中断
	mov $0x20, %al
    7e6a:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e6c:	e6 20                	out    %al,$0x20
	
	mov $KERNEL_DATA_SEG, %ax
    7e6e:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e72:	8e d8                	mov    %eax,%ds

	call task_sched
    7e74:	e8 b2 02 00 00       	call   812b <task_sched>

	popa
    7e79:	61                   	popa   
	pop %ds
    7e7a:	1f                   	pop    %ds
	
	iret
    7e7b:	cf                   	iret   

00007e7c <syscall_handler>:

//这里是系统调用使用的代码段
syscall_handler:
	//对寄存器进行保护
	push %ds
    7e7c:	1e                   	push   %ds
	pusha
    7e7d:	60                   	pusha  
	//使用内核数据段, 会在之后的pop的时候进行复原
	mov $KERNEL_DATA_SEG, %ax
    7e7e:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e82:	8e d8                	mov    %eax,%ds
	//获取传进来的参数, 之后再次入栈
	mov %esp, %ebp
    7e84:	89 e5                	mov    %esp,%ebp
	push 13*4(%ebp)
    7e86:	ff 75 34             	pushl  0x34(%ebp)
	push 12*4(%ebp)
    7e89:	ff 75 30             	pushl  0x30(%ebp)
	push 11*4(%ebp)
    7e8c:	ff 75 2c             	pushl  0x2c(%ebp)

	call do_syscall
    7e8f:	e8 14 00 00 00       	call   7ea8 <do_syscall>
	add $(3*4), %esp
    7e94:	83 c4 0c             	add    $0xc,%esp
	popa
    7e97:	61                   	popa   
	pop %ds
    7e98:	1f                   	pop    %ds
	retf $(3*4)
    7e99:	ca 0c 00             	lret   $0xc

00007e9c <gdt_desc>:
    7e9c:	ff 07                	incl   (%edi)
    7e9e:	00                   	.byte 0x0
    7e9f:	b0 00                	mov    $0x0,%al
	...

00007ea2 <idt_desc>:
    7ea2:	ff 07                	incl   (%edi)
    7ea4:	00 21                	add    %ah,(%ecx)
    7ea6:	01 00                	add    %eax,(%eax)

00007ea8 <do_syscall>:
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;

//系统调用
void do_syscall(int func, char * str, char color)
{
    7ea8:	55                   	push   %ebp
    7ea9:	89 e5                	mov    %esp,%ebp
    7eab:	83 ec 14             	sub    $0x14,%esp
    7eae:	8b 45 10             	mov    0x10(%ebp),%eax
    7eb1:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row=1;
    if(func==2)
    7eb4:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7eb8:	75 7f                	jne    7f39 <do_syscall+0x91>
    {
        unsigned short *dest = (unsigned short *)0xb8000 + 80*row;
    7eba:	8b 15 e8 f0 00 00    	mov    0xf0e8,%edx
    7ec0:	89 d0                	mov    %edx,%eax
    7ec2:	c1 e0 02             	shl    $0x2,%eax
    7ec5:	01 d0                	add    %edx,%eax
    7ec7:	c1 e0 05             	shl    $0x5,%eax
    7eca:	05 00 80 0b 00       	add    $0xb8000,%eax
    7ecf:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while(*str){
    7ed2:	eb 27                	jmp    7efb <do_syscall+0x53>
            *dest ++ = *str ++ | (color<<8);
    7ed4:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ed7:	8d 50 01             	lea    0x1(%eax),%edx
    7eda:	89 55 0c             	mov    %edx,0xc(%ebp)
    7edd:	0f b6 00             	movzbl (%eax),%eax
    7ee0:	66 98                	cbtw   
    7ee2:	0f be 55 ec          	movsbl -0x14(%ebp),%edx
    7ee6:	c1 e2 08             	shl    $0x8,%edx
    7ee9:	09 d0                	or     %edx,%eax
    7eeb:	89 c1                	mov    %eax,%ecx
    7eed:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7ef0:	8d 50 02             	lea    0x2(%eax),%edx
    7ef3:	89 55 fc             	mov    %edx,-0x4(%ebp)
    7ef6:	89 ca                	mov    %ecx,%edx
    7ef8:	66 89 10             	mov    %dx,(%eax)
        while(*str){
    7efb:	8b 45 0c             	mov    0xc(%ebp),%eax
    7efe:	0f b6 00             	movzbl (%eax),%eax
    7f01:	84 c0                	test   %al,%al
    7f03:	75 cf                	jne    7ed4 <do_syscall+0x2c>
        }
        row = (row>=25)?0:row+1;
    7f05:	a1 e8 f0 00 00       	mov    0xf0e8,%eax
    7f0a:	83 f8 18             	cmp    $0x18,%eax
    7f0d:	7f 0a                	jg     7f19 <do_syscall+0x71>
    7f0f:	a1 e8 f0 00 00       	mov    0xf0e8,%eax
    7f14:	83 c0 01             	add    $0x1,%eax
    7f17:	eb 05                	jmp    7f1e <do_syscall+0x76>
    7f19:	b8 00 00 00 00       	mov    $0x0,%eax
    7f1e:	a3 e8 f0 00 00       	mov    %eax,0xf0e8
        for(int i=0;i<0xffffff;i++);
    7f23:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f2a:	eb 04                	jmp    7f30 <do_syscall+0x88>
    7f2c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    7f30:	81 7d f8 fe ff ff 00 	cmpl   $0xfffffe,-0x8(%ebp)
    7f37:	7e f3                	jle    7f2c <do_syscall+0x84>
    }
    
}
    7f39:	90                   	nop
    7f3a:	c9                   	leave  
    7f3b:	c3                   	ret    

00007f3c <sys_show>:
//这个是打印字符串的函数, 参数是要打印的字符串和显示的颜色,之后会使用系统调用
void sys_show(char *str, char color)
{
    7f3c:	55                   	push   %ebp
    7f3d:	89 e5                	mov    %esp,%ebp
    7f3f:	83 ec 14             	sub    $0x14,%esp
    7f42:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f45:	88 45 ec             	mov    %al,-0x14(%ebp)
    uint32_t addr[] = {0, SYSCALL_SEG};
    7f48:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f4f:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)

    __asm__ __volatile__("push %[color];push %[str];push %[id];lcalll *(%[a])"::
    7f56:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f59:	ba 02 00 00 00       	mov    $0x2,%edx
    7f5e:	ff 75 ec             	pushl  -0x14(%ebp)
    7f61:	ff 75 08             	pushl  0x8(%ebp)
    7f64:	52                   	push   %edx
    7f65:	ff 18                	lcall  *(%eax)
                    [a]"r"(addr), [color]"m"(color), [str]"m"(str), [id]"r"(2));
}
    7f67:	90                   	nop
    7f68:	c9                   	leave  
    7f69:	c3                   	ret    

00007f6a <task_0>:


//任务1
void task_0(void)
{
    7f6a:	55                   	push   %ebp
    7f6b:	89 e5                	mov    %esp,%ebp
    7f6d:	83 ec 10             	sub    $0x10,%esp
    char * str = "task1 a:1234";
    7f70:	c7 45 f8 63 81 00 00 	movl   $0x8163,-0x8(%ebp)
    uint8_t color = 0;
    7f77:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for(;;){
        sys_show(str, color++);
    7f7b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7f7f:	8d 50 01             	lea    0x1(%eax),%edx
    7f82:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7f85:	0f be c0             	movsbl %al,%eax
    7f88:	50                   	push   %eax
    7f89:	ff 75 f8             	pushl  -0x8(%ebp)
    7f8c:	e8 ab ff ff ff       	call   7f3c <sys_show>
    7f91:	83 c4 08             	add    $0x8,%esp
    7f94:	eb e5                	jmp    7f7b <task_0+0x11>

00007f96 <task_1>:
    }
}
//任务2
void task_1(void)
{
    7f96:	55                   	push   %ebp
    7f97:	89 e5                	mov    %esp,%ebp
    7f99:	83 ec 10             	sub    $0x10,%esp
    char * str = "task2 b:5678";
    7f9c:	c7 45 f8 70 81 00 00 	movl   $0x8170,-0x8(%ebp)

    uint8_t color = 0xff;
    7fa3:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    for(;;){
        sys_show(str, color--);
    7fa7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
    7fab:	8d 50 ff             	lea    -0x1(%eax),%edx
    7fae:	88 55 ff             	mov    %dl,-0x1(%ebp)
    7fb1:	0f be c0             	movsbl %al,%eax
    7fb4:	50                   	push   %eax
    7fb5:	ff 75 f8             	pushl  -0x8(%ebp)
    7fb8:	e8 7f ff ff ff       	call   7f3c <sys_show>
    7fbd:	83 c4 08             	add    $0x8,%esp
    7fc0:	eb e5                	jmp    7fa7 <task_1+0x11>

00007fc2 <outb>:
    // es, cs, ss, ds, fs, gs, ldt, iomap
    TASK_DATA_SEG, TASK_CODE_SEG, TASK_DATA_SEG, TASK_DATA_SEG, TASK_DATA_SEG, TASK_DATA_SEG, TASK1_LDT_SEG, 0x0,
};

//对汇编指令进行一个封装
void outb(uint8_t data,uint16_t port){
    7fc2:	55                   	push   %ebp
    7fc3:	89 e5                	mov    %esp,%ebp
    7fc5:	83 ec 08             	sub    $0x8,%esp
    7fc8:	8b 55 08             	mov    0x8(%ebp),%edx
    7fcb:	8b 45 0c             	mov    0xc(%ebp),%eax
    7fce:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7fd1:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    //这里传入两个数据,第一个数据是data,第二个数据是port,之后进行数据的关联,"d"会识别为%dx,之后会把port放进去
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7fd5:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7fd9:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7fdd:	ee                   	out    %al,(%dx)
}
    7fde:	90                   	nop
    7fdf:	c9                   	leave  
    7fe0:	c3                   	ret    

00007fe1 <os_init>:
void timer_int(void);
void syscall_handler(void);


//初始化一个页表,并在之后设置为0x80000000映射到这一个数组的位置
void os_init(void){
    7fe1:	55                   	push   %ebp
    7fe2:	89 e5                	mov    %esp,%ebp
    7fe4:	83 ec 10             	sub    $0x10,%esp
    //初始化定时器
    //初始化中断控制器
    outb(0x11, 0x20);
    7fe7:	6a 20                	push   $0x20
    7fe9:	6a 11                	push   $0x11
    7feb:	e8 d2 ff ff ff       	call   7fc2 <outb>
    7ff0:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    7ff3:	68 a0 00 00 00       	push   $0xa0
    7ff8:	6a 11                	push   $0x11
    7ffa:	e8 c3 ff ff ff       	call   7fc2 <outb>
    7fff:	83 c4 08             	add    $0x8,%esp
    //设置主片的中断起始位置
    outb(0x20, 0x21);
    8002:	6a 21                	push   $0x21
    8004:	6a 20                	push   $0x20
    8006:	e8 b7 ff ff ff       	call   7fc2 <outb>
    800b:	83 c4 08             	add    $0x8,%esp
    //设置从片的中断起始位置
    outb(0x28, 0xa1);
    800e:	68 a1 00 00 00       	push   $0xa1
    8013:	6a 28                	push   $0x28
    8015:	e8 a8 ff ff ff       	call   7fc2 <outb>
    801a:	83 c4 08             	add    $0x8,%esp
    //设置从片连接主片的位置
    outb((1<<2), 0x21);
    801d:	6a 21                	push   $0x21
    801f:	6a 04                	push   $0x4
    8021:	e8 9c ff ff ff       	call   7fc2 <outb>
    8026:	83 c4 08             	add    $0x8,%esp
    //设置从片连接主片使用的引脚
    outb(2, 0xa1);
    8029:	68 a1 00 00 00       	push   $0xa1
    802e:	6a 02                	push   $0x2
    8030:	e8 8d ff ff ff       	call   7fc2 <outb>
    8035:	83 c4 08             	add    $0x8,%esp
    //设置连接的模式
    outb(0x1,0x21);
    8038:	6a 21                	push   $0x21
    803a:	6a 01                	push   $0x1
    803c:	e8 81 ff ff ff       	call   7fc2 <outb>
    8041:	83 c4 08             	add    $0x8,%esp
    outb(0x1,0xa1);
    8044:	68 a1 00 00 00       	push   $0xa1
    8049:	6a 01                	push   $0x1
    804b:	e8 72 ff ff ff       	call   7fc2 <outb>
    8050:	83 c4 08             	add    $0x8,%esp
    //设置中断的屏蔽
    outb(0xfe,0x21);    //只有最低的中断也就是时钟中断没有被屏蔽
    8053:	6a 21                	push   $0x21
    8055:	68 fe 00 00 00       	push   $0xfe
    805a:	e8 63 ff ff ff       	call   7fc2 <outb>
    805f:	83 c4 08             	add    $0x8,%esp
    outb(0xff,0xa1);
    8062:	68 a1 00 00 00       	push   $0xa1
    8067:	68 ff 00 00 00       	push   $0xff
    806c:	e8 51 ff ff ff       	call   7fc2 <outb>
    8071:	83 c4 08             	add    $0x8,%esp
    //配置外部时钟源,是一个16位的计数器,减到0的时候会产生中断,这里计算每秒产生100次中断大概需要的数值
    int tmo = 1193180 / 100;
    8074:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    //写入数值
    //设置使用的时钟以及自动加载
    outb(0x36, 0x43);
    807b:	6a 43                	push   $0x43
    807d:	6a 36                	push   $0x36
    807f:	e8 3e ff ff ff       	call   7fc2 <outb>
    8084:	83 c4 08             	add    $0x8,%esp
    //中断频率的设置
    outb((uint8_t)tmo, 0x40);
    8087:	8b 45 fc             	mov    -0x4(%ebp),%eax
    808a:	0f b6 c0             	movzbl %al,%eax
    808d:	6a 40                	push   $0x40
    808f:	50                   	push   %eax
    8090:	e8 2d ff ff ff       	call   7fc2 <outb>
    8095:	83 c4 08             	add    $0x8,%esp
    outb(tmo>>8, 0x40);
    8098:	8b 45 fc             	mov    -0x4(%ebp),%eax
    809b:	c1 f8 08             	sar    $0x8,%eax
    809e:	0f b6 c0             	movzbl %al,%eax
    80a1:	6a 40                	push   $0x40
    80a3:	50                   	push   %eax
    80a4:	e8 19 ff ff ff       	call   7fc2 <outb>
    80a9:	83 c4 08             	add    $0x8,%esp
    //记录中断处理函数的地址
    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xffff;
    80ac:	b8 68 7e 00 00       	mov    $0x7e68,%eax
    80b1:	66 a3 00 22 01 00    	mov    %ax,0x12200
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;
    80b7:	b8 68 7e 00 00       	mov    $0x7e68,%eax
    80bc:	c1 e8 10             	shr    $0x10,%eax
    80bf:	66 a3 06 22 01 00    	mov    %ax,0x12206
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    80c5:	66 c7 05 02 22 01 00 	movw   $0x8,0x12202
    80cc:	08 00 
    //设置为中断门,32位模式
    idt_table[0x20].attr = 0x8e00;
    80ce:	66 c7 05 04 22 01 00 	movw   $0x8e00,0x12204
    80d5:	00 8e 

    //设置两个任务控制段的地址
    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss;
    80d7:	b8 00 f0 00 00       	mov    $0xf000,%eax
    80dc:	66 a3 2a b0 00 00    	mov    %ax,0xb02a
    gdt_table[TASK1_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task1_tss;
    80e2:	b8 80 f0 00 00       	mov    $0xf080,%eax
    80e7:	66 a3 32 b0 00 00    	mov    %ax,0xb032
    //设置系统调用函数的地址
    gdt_table[SYSCALL_SEG / 8].limit_l = (uint16_t)(uint32_t)syscall_handler;
    80ed:	b8 7c 7e 00 00       	mov    $0x7e7c,%eax
    80f2:	66 a3 38 b0 00 00    	mov    %ax,0xb038

    //设置LDT的起始位置
    gdt_table[TASK0_LDT_SEG / 8].base_l = (uint16_t)(uint32_t)task0_ldt_table;
    80f8:	b8 00 a0 00 00       	mov    $0xa000,%eax
    80fd:	66 a3 42 b0 00 00    	mov    %ax,0xb042
    gdt_table[TASK1_LDT_SEG / 8].base_l = (uint16_t)(uint32_t)task1_ldt_table;
    8103:	b8 00 a8 00 00       	mov    $0xa800,%eax
    8108:	66 a3 4a b0 00 00    	mov    %ax,0xb04a

    //设置一级表,使用的是表的高10位
    pg_dir[MAG_ADDR>>22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    810e:	b8 00 d0 00 00       	mov    $0xd000,%eax
    8113:	83 c8 07             	or     $0x7,%eax
    8116:	a3 00 e8 00 00       	mov    %eax,0xe800
    //初始化表的二级,这里是实际的地址,之后需要设置对应的位置
    page_table[(MAG_ADDR>>12)&0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    811b:	b8 00 c0 00 00       	mov    $0xc000,%eax
    8120:	83 c8 07             	or     $0x7,%eax
    8123:	a3 00 d0 00 00       	mov    %eax,0xd000
}
    8128:	90                   	nop
    8129:	c9                   	leave  
    812a:	c3                   	ret    

0000812b <task_sched>:


//进行任务的切换
void task_sched(void){
    812b:	55                   	push   %ebp
    812c:	89 e5                	mov    %esp,%ebp
    812e:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG;
    
    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG;
    8131:	a1 ec f0 00 00       	mov    0xf0ec,%eax
    8136:	83 f8 28             	cmp    $0x28,%eax
    8139:	75 07                	jne    8142 <task_sched+0x17>
    813b:	b8 30 00 00 00       	mov    $0x30,%eax
    8140:	eb 05                	jmp    8147 <task_sched+0x1c>
    8142:	b8 28 00 00 00       	mov    $0x28,%eax
    8147:	a3 ec f0 00 00       	mov    %eax,0xf0ec
    //设置为没有偏移跳转到新的任务段
    uint32_t addr[] = {0, task_tss};
    814c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    8153:	a1 ec f0 00 00       	mov    0xf0ec,%eax
    8158:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    815b:	8d 45 f8             	lea    -0x8(%ebp),%eax
    815e:	ff 28                	ljmp   *(%eax)
}
    8160:	90                   	nop
    8161:	c9                   	leave  
    8162:	c3                   	ret    
