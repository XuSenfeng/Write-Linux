
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x00000ff4 memsz 0x00000ff4 flags r-x
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00004000 memsz 0x00005800 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039b  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000058  00007f9c  00007f9c  00000f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00004000  00008000  00008000  00001000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00001800  0000c000  0000c000  00005000  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00005018  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000226  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011d  00000000  00000000  0000527e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000000d1  00000000  00000000  0000539b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000154  00000000  00000000  0000546c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00007c00 l    d  .text	00000000 .text
00007f9c l    d  .eh_frame	00000000 .eh_frame
00008000 l    d  .data	00000000 .data
0000c000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e5d l       .text	00000000 gdt_desc
00007e63 l       .text	00000000 idt_desc
00007e47 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000a000 l     O .data	00001000 page_table
00008000 g     O .data	00000800 gdt_table
0000c000 g     O .bss	00001000 task0_dpl3_stack
00009000 g     O .data	00001000 map_phy_buffer
00007e54 g       .text	00000000 timer_int
00007e88 g     F .text	00000113 os_init
00007c00 g       .text	00000000 _start
00007e69 g     F .text	0000001f outb
0000c000 g       .bss	00000000 __bss_start
0000b000 g     O .data	00001000 pg_dir
0000c000 g       .data	00000000 _edata
0000d800 g       .bss	00000000 _end
0000d000 g     O .bss	00000800 idt_table



Disassembly of section .text:

00007c00 <_start>:

	// 以下是代码区
 	.text
_start:
//设置段寄存器
	mov $0, %ax
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax, %ds
	mov %ax, %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	//首先设置读取到的位置
	mov $_start_32, %bx
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	//在这里设置开始的扇区数
	mov $0x2, %cx
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	//在这里设置的是读取的数量,以及是使用的读取模式
	mov $0x240, %ax
	//在这里设置读取的是C盘
	mov $0x80, %dx
    7c1e:	00 cd                	add    %cl,%ch
	//调用中断
	int $0x13
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	//读取失败再次读取
	jc read_self_all
	//进入保护模式
	//关中断
	cli
    7c23:	fa                   	cli    
	//加载新的GDT表
	lgdt gdt_desc
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	5d                   	pop    %ebp
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	//加载中断向量表
	lidt idt_desc
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	63 7e 66             	arpl   %di,0x66(%esi)

	//设置CR0的0位, 操作的时候使用16位的操作寄存器
	mov $1, %eax
    7c2f:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax
    7c34:	0f 01 f0             	lmsw   %ax
	//跳转到内核代码段,进入32位模式,第一个参数是段的地址, 第二个数字是偏移量,也就是C语言程序被复制到的位置
	jmp $(KERNEL_CODE_SEG),$_start_32
    7c37:	ea 00 7e 08 00 eb fe 	ljmp   $0xfeeb,$0x87e00
	...
	jmp .
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	//标记下面是32位, 以及是代码段
	.code32
	.text
_start_32:
	//在这里设置段地址
	mov $KERNEL_DATA_SEG, %ax
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax, %ss
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax, %gs
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start, %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp
	//这时候进行初始化时钟, 打开时钟中断,同时设置中断的向量表
	call os_init
    7e13:	e8 70 00 00 00       	call   7e88 <os_init>
	//打开页表
	mov $pg_dir, %eax
    7e18:	b8 00 b0 00 00       	mov    $0xb000,%eax
	mov %eax, %cr3
    7e1d:	0f 22 d8             	mov    %eax,%cr3
	//CR4里面有一个位控制是否允许这一个模式 
	mov %cr4, %eax
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1<<4), %eax
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax, %cr4
    7e26:	0f 22 e0             	mov    %eax,%cr4
	//还需要控制PR0最高位w为1
	mov %cr0, %eax
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl $(1<<31), %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax, %cr0
    7e31:	0f 22 c0             	mov    %eax,%cr0

	//打开中断, 由于在进入任务的时候会设置IF位, 所以在这里的时候不再进行设置
	//sti
	
	//设置进入低特权级时候的所需要的栈
	push $APP_DATA_SEG
    7e34:	6a 23                	push   $0x23
	//设置栈的指针
	push $task0_dpl3_stack + 1024*4
    7e36:	68 00 d0 00 00       	push   $0xd000
	//设置EFLAGS, 主要是设置中断的状态
	push $0			//$0x202
    7e3b:	6a 00                	push   $0x0
	//这是代码段
	push $APP_CODE_SEG
    7e3d:	6a 1b                	push   $0x1b
	push $task_0_entry
    7e3f:	68 47 7e 00 00       	push   $0x7e47

	//在这里进入低特权级
	iret
    7e44:	cf                   	iret   
	jmp .
    7e45:	eb fe                	jmp    7e45 <_start_32+0x45>

00007e47 <task_0_entry>:

//进程0
task_0_entry:
	//ss在出栈的时候已经设置了
	mov %ss, %ax
    7e47:	66 8c d0             	mov    %ss,%ax
	mov %ax, %ds
    7e4a:	8e d8                	mov    %eax,%ds
	mov %ax, %es
    7e4c:	8e c0                	mov    %eax,%es
	mov %ax, %gs
    7e4e:	8e e8                	mov    %eax,%gs
	mov %ax, %fs
    7e50:	8e e0                	mov    %eax,%fs
	jmp .
    7e52:	eb fe                	jmp    7e52 <task_0_entry+0xb>

00007e54 <timer_int>:

//中断处理函数
timer_int:

	//对寄存器进行保护
	push %ds
    7e54:	1e                   	push   %ds
	pusha
    7e55:	60                   	pusha  

	//清除中断
	mov $0x20, %al
    7e56:	b0 20                	mov    $0x20,%al
	outb %al, $0x20
    7e58:	e6 20                	out    %al,$0x20
	
	popa
    7e5a:	61                   	popa   
	pop %ds
    7e5b:	1f                   	pop    %ds
	
	iret
    7e5c:	cf                   	iret   

00007e5d <gdt_desc>:
    7e5d:	ff 07                	incl   (%edi)
    7e5f:	00                   	.byte 0x0
    7e60:	80 00 00             	addb   $0x0,(%eax)

00007e63 <idt_desc>:
    7e63:	ff 07                	incl   (%edi)
    7e65:	00 d0                	add    %dl,%al
	...

00007e69 <outb>:
//初始化一个32位的栈, 使用模式为特权级3
uint32_t task0_dpl3_stack[1024];


//对汇编指令进行一个封装
void outb(uint8_t data,uint16_t port){
    7e69:	55                   	push   %ebp
    7e6a:	89 e5                	mov    %esp,%ebp
    7e6c:	83 ec 08             	sub    $0x8,%esp
    7e6f:	8b 55 08             	mov    0x8(%ebp),%edx
    7e72:	8b 45 0c             	mov    0xc(%ebp),%eax
    7e75:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7e78:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    //这里传入两个数据,第一个数据是data,第二个数据是port,之后进行数据的关联,"d"会识别为%dx,之后会把port放进去
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port), [v]"a"(data));
    7e7c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7e80:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7e84:	ee                   	out    %al,(%dx)
}
    7e85:	90                   	nop
    7e86:	c9                   	leave  
    7e87:	c3                   	ret    

00007e88 <os_init>:

//在汇编文件中实现的中断处理函数, 在这里进行声明
void timer_int(void);
//初始化一个页表,并在之后设置为0x80000000映射到这一个数组的位置
void os_init(void){
    7e88:	55                   	push   %ebp
    7e89:	89 e5                	mov    %esp,%ebp
    7e8b:	83 ec 10             	sub    $0x10,%esp
    //初始化定时器
    //初始化中断控制器
    outb(0x11, 0x20);
    7e8e:	6a 20                	push   $0x20
    7e90:	6a 11                	push   $0x11
    7e92:	e8 d2 ff ff ff       	call   7e69 <outb>
    7e97:	83 c4 08             	add    $0x8,%esp
    outb(0x11, 0xA0);
    7e9a:	68 a0 00 00 00       	push   $0xa0
    7e9f:	6a 11                	push   $0x11
    7ea1:	e8 c3 ff ff ff       	call   7e69 <outb>
    7ea6:	83 c4 08             	add    $0x8,%esp
    //设置主片的中断起始位置
    outb(0x20, 0x21);
    7ea9:	6a 21                	push   $0x21
    7eab:	6a 20                	push   $0x20
    7ead:	e8 b7 ff ff ff       	call   7e69 <outb>
    7eb2:	83 c4 08             	add    $0x8,%esp
    //设置从片的中断起始位置
    outb(0x28, 0xa1);
    7eb5:	68 a1 00 00 00       	push   $0xa1
    7eba:	6a 28                	push   $0x28
    7ebc:	e8 a8 ff ff ff       	call   7e69 <outb>
    7ec1:	83 c4 08             	add    $0x8,%esp
    //设置从片连接主片的位置
    outb((1<<2), 0x21);
    7ec4:	6a 21                	push   $0x21
    7ec6:	6a 04                	push   $0x4
    7ec8:	e8 9c ff ff ff       	call   7e69 <outb>
    7ecd:	83 c4 08             	add    $0x8,%esp
    //设置从片连接主片使用的引脚
    outb(2, 0xa1);
    7ed0:	68 a1 00 00 00       	push   $0xa1
    7ed5:	6a 02                	push   $0x2
    7ed7:	e8 8d ff ff ff       	call   7e69 <outb>
    7edc:	83 c4 08             	add    $0x8,%esp
    //设置连接的模式
    outb(0x1,0x21);
    7edf:	6a 21                	push   $0x21
    7ee1:	6a 01                	push   $0x1
    7ee3:	e8 81 ff ff ff       	call   7e69 <outb>
    7ee8:	83 c4 08             	add    $0x8,%esp
    outb(0x1,0xa1);
    7eeb:	68 a1 00 00 00       	push   $0xa1
    7ef0:	6a 01                	push   $0x1
    7ef2:	e8 72 ff ff ff       	call   7e69 <outb>
    7ef7:	83 c4 08             	add    $0x8,%esp
    //设置中断的屏蔽
    outb(0xfe,0x21);    //只有最低的中断也就是时钟中断没有被屏蔽
    7efa:	6a 21                	push   $0x21
    7efc:	68 fe 00 00 00       	push   $0xfe
    7f01:	e8 63 ff ff ff       	call   7e69 <outb>
    7f06:	83 c4 08             	add    $0x8,%esp
    outb(0xff,0xa1);
    7f09:	68 a1 00 00 00       	push   $0xa1
    7f0e:	68 ff 00 00 00       	push   $0xff
    7f13:	e8 51 ff ff ff       	call   7e69 <outb>
    7f18:	83 c4 08             	add    $0x8,%esp
    //配置外部时钟源,是一个16位的计数器,减到0的时候会产生中断,这里计算每秒产生100次中断大概需要的数值
    int tmo = 1193180 / 100;
    7f1b:	c7 45 fc 9b 2e 00 00 	movl   $0x2e9b,-0x4(%ebp)
    //写入数值
    //设置使用的时钟以及自动加载
    outb(0x36, 0x43);
    7f22:	6a 43                	push   $0x43
    7f24:	6a 36                	push   $0x36
    7f26:	e8 3e ff ff ff       	call   7e69 <outb>
    7f2b:	83 c4 08             	add    $0x8,%esp
    //中断频率的设置
    outb((uint8_t)tmo, 0x40);
    7f2e:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f31:	0f b6 c0             	movzbl %al,%eax
    7f34:	6a 40                	push   $0x40
    7f36:	50                   	push   %eax
    7f37:	e8 2d ff ff ff       	call   7e69 <outb>
    7f3c:	83 c4 08             	add    $0x8,%esp
    outb(tmo>>8, 0x40);
    7f3f:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7f42:	c1 f8 08             	sar    $0x8,%eax
    7f45:	0f b6 c0             	movzbl %al,%eax
    7f48:	6a 40                	push   $0x40
    7f4a:	50                   	push   %eax
    7f4b:	e8 19 ff ff ff       	call   7e69 <outb>
    7f50:	83 c4 08             	add    $0x8,%esp
    //记录中断处理函数的地址
    idt_table[0x20].offset_l = (uint32_t)timer_int & 0xffff;
    7f53:	b8 54 7e 00 00       	mov    $0x7e54,%eax
    7f58:	66 a3 00 d1 00 00    	mov    %ax,0xd100
    idt_table[0x20].offset_h = (uint32_t)timer_int >> 16;
    7f5e:	b8 54 7e 00 00       	mov    $0x7e54,%eax
    7f63:	c1 e8 10             	shr    $0x10,%eax
    7f66:	66 a3 06 d1 00 00    	mov    %ax,0xd106
    idt_table[0x20].selector = KERNEL_CODE_SEG;
    7f6c:	66 c7 05 02 d1 00 00 	movw   $0x8,0xd102
    7f73:	08 00 
    //设置为中断门,32位模式
    idt_table[0x20].attr = 0x8e00;
    7f75:	66 c7 05 04 d1 00 00 	movw   $0x8e00,0xd104
    7f7c:	00 8e 



    //设置一级表,使用的是表的高10位
    pg_dir[MAG_ADDR>>22] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U;
    7f7e:	b8 00 a0 00 00       	mov    $0xa000,%eax
    7f83:	83 c8 07             	or     $0x7,%eax
    7f86:	a3 00 b8 00 00       	mov    %eax,0xb800
    //初始化表的二级,这里是实际的地址,之后需要设置对应的位置
    page_table[(MAG_ADDR>>12)&0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U;
    7f8b:	b8 00 90 00 00       	mov    $0x9000,%eax
    7f90:	83 c8 07             	or     $0x7,%eax
    7f93:	a3 00 a0 00 00       	mov    %eax,0xa000
}
    7f98:	90                   	nop
    7f99:	c9                   	leave  
    7f9a:	c3                   	ret    
